import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
	id 'java-library'
	id 'kotlin'

	id("org.springframework.boot") version "2.7.0" apply false
	id("io.spring.dependency-management") version "1.0.12.RELEASE"

	id "org.jetbrains.kotlin.jvm" //version "1.3.50"
	id "org.jetbrains.kotlin.plugin.spring" version "1.6.21"
	id "org.jetbrains.kotlin.plugin.jpa" version "1.6.21"

	id 'com.bmuschko.docker-spring-boot-application' version '6.1.1'
	id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.2"
}

dependencyManagement {
	imports {
		mavenBom SpringBootPlugin.BOM_COORDINATES
	}
}

dependencies {
	api("org.springframework.boot:spring-boot-starter-data-jpa")
//	compile("org.springframework.boot:spring-boot-starter-jersey")
	implementation("org.springframework.boot:spring-boot-starter-validation")
//	implementation("org.springframework.boot:spring-boot-starter-security")
	implementation("org.springframework.security:spring-security-config")
	implementation("org.springframework.boot:spring-boot-starter-mail")
	api group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: '2.1.6'

	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation ('com.auth0:java-jwt:4.0.0')

	api('io.swagger.parser.v3:swagger-parser:2.1.1')
	testImplementation("com.h2database:h2")
}

java.sourceCompatibility = JavaVersion.VERSION_11

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "11"
	}
}

test {
	useJUnitPlatform {
		excludeTags 'db'
	}
}

resolve {
	// careful: coupled with 'describe' endpoint
	outputFileName = 'oaboard-api'

	outputFormat = 'yaml'
	prettyPrint = true
	classpath = sourceSets.main.runtimeClasspath
	resourcePackages = ['io.rss.openapiboard.server.presentation.resource']
	outputDir = file(project.buildDir.toPath().resolve('resources/main'))

	// unfortunately not working with yaml
	openApiFile = file(project.projectDir.toPath().resolve('src/main/resources/swagger/openapi-config.json'))
}

task copyTestResource(type: Copy) {
	from "${project.projectDir}/src/test/resources"
	into "${project.buildDir}/resources/main"

	doFirst {
		print "Copying files for testing..."
	}
}