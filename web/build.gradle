import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    dependencies {
        classpath (group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1')
    }
}

plugins {
    id("org.springframework.boot")
    id("io.spring.dependency-management")

    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.spring" version "1.6.21"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.6.21"

    id 'com.bmuschko.docker-spring-boot-application' version '6.1.1'
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.2"
}

configurations {
    provided
    devClasspath
    prodClasspath
}

sourceSets {
    main { compileClasspath += configurations.provided }
}

dependencies {
    implementation project(":core")

    implementation("org.springframework.boot:spring-boot-starter-jersey")
    implementation("org.springframework.boot:spring-boot-starter-security")

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation ('com.auth0:java-jwt:4.0.0')

    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib")

    implementation("org.glassfish.jersey.media:jersey-media-multipart:2.35")
    implementation('io.swagger.core.v3:swagger-annotations:2.2.2')

    devClasspath("com.h2database:h2")
    prodClasspath group: 'mysql', name: 'mysql-connector-java', version: '8.0.18'

    /* Testing */
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude(module: "junit")
        exclude(module: "junit-vintage-engine")
    }
    testImplementation("org.springframework.security:spring-security-test")
//    testImplementation("org.junit.jupiter:junit-jupiter-api:5.3.2")
//    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.3.2")
//    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.1.0'
//    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation("com.h2database:h2")
}

java.sourceCompatibility = JavaVersion.VERSION_11

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

test {
    useJUnitPlatform {
        excludeTags 'db'
    }
}

resolve {
    // careful: coupled with 'describe' endpoint
    outputFileName = 'oaboard-api'

    outputFormat = 'yaml'
    prettyPrint = true
    classpath = sourceSets.main.runtimeClasspath
    resourcePackages = ['io.rss.openapiboard.server.presentation.resource']
    outputDir = file(project.buildDir.toPath().resolve('resources/main'))

    // unfortunately not working with yaml
    openApiFile = file(project.projectDir.toPath().resolve('src/main/resources/swagger/openapi-config.json'))
}
bootJar.dependsOn('resolve')

docker {

    springBootApplication {
        baseImage = 'openjdk:8-alpine'
        ports = [8080]
        images = ['oaboard-server:oab', 'oaboard-server:latest']
        jvmArgs = []
    }
}

// ------------------------------------ Env settings ----------------------------------

def h2DB = [
        db_classname: 'org.h2.Driver',
        db_url: 'h2:mem:openapi-board',
//		db_url: 'h2:~/openapi-board',
        hibernate_dialect: 'org.hibernate.dialect.H2Dialect',
        db_username: 'sa',
        db_password: "''"
];

def mySqlDB = [
        db_classname: 'com.mysql.jdbc.Driver',
        hibernate_dialect: 'org.hibernate.dialect.MySQL5InnoDBDialect',
        db_url: 'mysql://localhost:3306/oab',
        db_username: 'oab',
        db_password: '123456'
];

// ------------------------------------ Env-dependent tasks ----------------------------------

task copyTestResource(type: Copy) {
    from "${project.projectDir}/src/test/resources"
    into "${project.buildDir}/resources/main"

    doFirst {
        print "Copying files for testing..."
    }
}

// With MySQL
task buildProduction(group: 'docker') {

    doFirst {
        sourceSets {
            main { runtimeClasspath += configurations.prodClasspath }
        }

        dockerSyncBuildContext {
            into ('libs') {
                from configurations.prodClasspath
            }
        }

        dockerCreateDockerfile {
            mySqlDB.each {e ->
                environmentVariable e.key, e.value
            }
        }

        dockerBuildImage {
            if (project.version.toString().contains('SNAPSHOT')) {
                images = ['oaboard-server:latest']
            } else {
                images = ['oaboard-server:latest', 'oaboard-server:' + project.version()]
            }
        }
    }
    dependsOn('clean')
    finalizedBy('build', 'dockerCreateDockerfile')
}

// With H2
task buildH2(group: 'docker') {
    doFirst {
        sourceSets {
            main { runtimeClasspath += configurations.devClasspath }
        }

        dockerSyncBuildContext {
            into ('libs') {
                from configurations.devClasspath
            }
        }

        dockerCreateDockerfile {
			environmentVariable 'spring.profiles.active', 'preLoad'
            h2DB.each {e ->
                environmentVariable e.key, e.value
            }
        }

        dockerBuildImage {
            if (project.version.toString().contains('SNAPSHOT')) {
                images = ['oaboard-server-h2:latest']
            } else {
                images = ['oaboard-server-h2:latest', 'oaboard-server-h2:' + project.version()]
            }
        }
    }
    dependsOn('clean')
    finalizedBy('build', 'dockerBuildImage')
}

// ------------------------------------ Local run tasks ----------------------------------

task bootRunH2(type: BootRun) {
    group = 'Application'
    dependsOn('build')

    sourceResources sourceSets.test
    mainClass = bootJar.mainClass

    doFirst() {
        systemProperty 'spring.profiles.active', 'dev, preLoad'

        h2DB.each {e ->
            systemProperty e.key, e.value
        }

//        main = bootJar.mainClassName
        sourceSets.main.runtimeClasspath += configurations.devClasspath
        classpath = sourceSets.main.runtimeClasspath
    }
}

task bootRunMySQL(type: BootRun, dependsOn: 'build') {
    group = 'Application'
    mainClass = bootJar.mainClass

    doFirst() {
//        main = bootJar.mainClassName
        sourceSets.main.runtimeClasspath += configurations.prodClasspath
        classpath = sourceSets.main.runtimeClasspath

        systemProperty 'spring.profiles.active', 'dev, preLoad'
        mySqlDB.each {e ->
            systemProperty e.key, e.value
        }
    }
}

